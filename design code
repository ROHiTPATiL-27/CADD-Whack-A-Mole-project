module Top_Module(   //Top Module
    input clk, //system clock 100 MHz Basys 3 Board
	input [15:0] sw,//switches to whack a mole
	input reset, //to reset the game
	output [15:0] led, //leds as mole
	output [3:0] an, 
	output [6:0] seg); //to display timer (2 left most segments) and mole count (2 right most segments)
	
	
	wire clk_out; //100 Hz slow clock for toggling 7 segments
	wire timer_clk_out; //1Hz (1 sec) timer clock for count down 20, 19, 18,...0
	wire [3:0] mux_out; //output of the multiplexer
	wire [1:0] counter_out; //2-bit counter output, initially set to 0
	wire [3:0] timer_count_ones, timer_count_tens, score_ones, score_tens;//input to Mux, o/p of BCD module
	wire [5:0] score_count; //Max score of 32, input to BCD module
	wire [4:0] timer_count; //Game Timer runs for 20 seconds, input to BCD module

	
	binarytobcd UBCD(timer_count, score_count, timer_count_ones, timer_count_tens, score_ones, score_tens); 
	
	mux4to1 UMUX(score_ones, score_tens, timer_count_ones, timer_count_tens, counter_out, mux_out); 
	
	slowclock USCK(clk, clk_out); //slow clock for seven segment
	
	twobitcounter U2BC(clk_out, counter_out); //counter for toggling 4 segments on board and displaying game timer and score count
	
	decoder2to4 UD(counter_out, an); //cycles through 4 segments on Basys 3
	
	bcd7seg UBCDSEG(mux_out, seg); //Converts bcd to seven segment
	
    timerClock UTCK(clk, timer_clk_out); //1 second clock for game timer
	
	timerCount UTC(clk, reset, timer_count); //Game timer 20 --> 0
	
	Whack_a_Mole_Game UWGM(clk, sw, reset, led, score_count);//Game/score count
	
endmodule

  
module binarytobcd(
input [7:0] timerInput, 	//Timer Count 20>>19>>18>...0
input [7:0] scoreInput,     //Score Count, max of 32
output [3:0] timerOnes, 	//We need 4 bits to display a digit for ones as it could go from 0 to 9. 
output [3:0] timerTens, 	//We need 4 bits to display a digit for tens as it could go from 0 to 9.
output [3:0] scoreOnes,
output [3:0] scoreTens); 	//We need to bits to display  a digit for hundreds as it could go from 0 to 2.

wire [3:0] a1,a2,a3,a4,a5,a6,a7; //Declaring data lines coming out of each add 3 module as wires. 
wire [3:0] b1,b2,b3,b4,b5,b6,b7; //Declaring data lines going into each add 3 module as wires.
wire [3:0] c1,c2,c3,c4,c5,c6,c7; //Declaring data lines coming out of each add 3 module as wires. 
wire [3:0] d1,d2,d3,d4,d5,d6,d7; //Declaring data lines going into each add 3 module as wires.

//Timer section
//Follow the Block Diagram
assign b1 = {1'b0,timerInput[7:5]};	 //LMB is 0. A[7:5] -->Inputs refer to B7, B6, B5 going into C1 
assign b2 = {a1[2:0],timerInput[4]}; 	//Inputs going into C2

//do 3-5
assign b3 = {a2[2:0], timerInput[3]};
assign b4 = {a3[2:0], timerInput[2]};
assign b5 = {a4[2:0], timerInput[1]};

assign b6 = {1'b0,a1[3],a2[3],a3[3]}; 		//LMB is 1. Inputs going into C6.  
assign b7 = {a6[2:0],a4[3]}; 		//Inputs going into C7.

add3 m1(b1,a1);	 //Using add3 module that you created above to perform operation on  csign and dsign on all 7 modules. 
add3 m2(b2,a2);

add3 m3(b3,a3);
add3 m4(b4,a4);
add3 m5(b5,a5);
add3 m6(b6,a6);
add3 m7(b7,a7);
//add in 5 more of these as necessary, look at diagram

assign timerOnes = {a5[2:0],timerInput[0]}; 	//four bits that will make-up ones. 
assign timerTens = {a7[2:0],a5[3]}; 	//four bits that will make-up tens. 

/////////////////////////////////////////////////////////////////////////
//Score section
//Follow the Block Diagram
assign d1 = {1'b0,scoreInput[7:5]};	 //LMB is 0. A[7:5] -->Inputs refer to B7, B6, B5 going into C1 
assign d2 = {c1[2:0],scoreInput[4]}; 	//Inputs going into C2

//do 3-5
assign d3 = {c2[2:0], scoreInput[3]};
assign d4 = {c3[2:0], scoreInput[2]};
assign d5 = {c4[2:0], scoreInput[1]};

assign d6 = {1'b0,c1[3],c2[3],c3[3]}; 		//LMB is 1. Inputs going into C6.  
assign d7 = {c6[2:0],c4[3]}; 		//Inputs going into C7.

add3 n1(d1,c1);	 //Using add3 module that you created above to perform operation on  csign and dsign on all 7 modules. 
add3 n2(d2,c2);

add3 n3(d3,c3);
add3 n4(d4,c4);
add3 n5(d5,c5);
add3 n6(d6,c6);
add3 n7(d7,c7);
//add in 5 more of these as necessary, look at diagram

assign scoreOnes = {c5[2:0],scoreInput[0]}; //two bits that will make-up hundreds, finish the line, follow the block diagram.
assign scoreTens = {c7[2:0],c5[3]};
//^^^Finish this!!!

endmodule

  module mux4to1( 
input [3:0] A,
input [3:0] B,
input [3:0] C,
input [3:0] D,
input [1:0] sel, 
output [3:0] Y);
assign Y = (sel==0)?A : (sel==1)?B : (sel==2)?C : D; //selector switches decide what data at the input data lines go through to the output (Y). 
endmodule

  module slowclock (
    input clk_in,
    output reg clk_out);
    
    reg [20:0] period_count = 0;


always @ (posedge clk_in)
    if (period_count!= 500000 - 1)
        begin
        period_count<= period_count + 1;
        clk_out <= 0; //clk_out gets 0.
        end
    else
        begin
        period_count <= 0;
        clk_out <= 1;
    end
endmodule

      module twobitcounter(
input clk,
 output [1:0] Q);
reg [1:0] temp = 0;
always @(posedge clk) begin
temp = temp + 1;
 end
assign Q = temp;
endmodule

  module decoder2to4 (
input [1:0] en,
output reg [3:0] an); 
always@(en) begin
 case (en)
0: an=4'b1110;
1: an=4'b1101;
2: an=4'b1011;
3: an=4'b0111;
 endcase
end
endmodule

  module bcd7seg(
input[3:0] Y,
output reg[6:0] disp);
    always@(Y)
    begin
        case(Y)
            0: disp=7'b1000000;
            1: disp=7'b1111001;
            2: disp=7'b0100100;
            3: disp=7'b0110000;
            4: disp=7'b0011001;
            5: disp=7'b0010010;
            6: disp=7'b0000010;
            7: disp=7'b1111000;
            8: disp=7'b0000000;
            9: disp=7'b0010000;
            10: disp=7'b0001000;
            11: disp=7'b0000011;
            12: disp=7'b1000110;
            13: disp=7'b0100001;
            14: disp=7'b0000110;
            15: disp=7'b0001110;
        endcase
end
endmodule

module timerClock(
    input clk_in,
    output  reg clk_out);
    
    reg [27:0] period_count = 0;


always @ (posedge clk_in) //1 hZ clock, 1 sec
    if (period_count != 100_000_000 - 1) //100 Mhz
        begin
        period_count<=  period_count + 1;
         clk_out <= 0; 
         end
                 
    else
        
        begin
        period_count <= 0;
        clk_out <= 1;
end
 
endmodule

  module timerCount(
input clk,//clock from Basys 3
    input reset,//reset
       output [4:0] count//20 second timer
);
wire clk_out;
timerClock UTC(clk, clk_out);

reg [4:0] current_count = 20; //initially setting counter to zero
always @(posedge clk_out) begin //when positive edge of the clock arrives
    if(reset)
        current_count <= 20;
    else if(current_count == 0)
        current_count <= current_count;           
    else if(current_count >= 1)
        current_count <= current_count - 1; 
    else
        current_count <= current_count;
end
    assign count = current_count;
endmodule

  module timerClock(
    input clk_in,
    output  reg clk_out);
    
    reg [27:0] period_count = 0;


always @ (posedge clk_in) //1 hZ clock, 1 sec
    if (period_count != 100_000_000 - 1) //100 Mhz
        begin
        period_count<=  period_count + 1;
         clk_out <= 0; 
         end
                 
    else
        
        begin
        period_count <= 0;
        clk_out <= 1;
end
 
endmodule

  module Whack_a_Mole_Game( //score count module
input clk, //system clock 100 MHz
input [15:0] sw, //switches used to whack a mole
input reset,//reset or to restart the game at any point
output reg [15:0] led, //leds as mole
output reg [5:0]score_count); //maximum cmole count 32

localparam 
S000000 = 0, //constant declared for each state, for maximum score count of 32
S000001 = 1, 
S000010 = 2, //
S000011 = 3,
S000100 = 4,
S000101 = 5,
S000110 = 6,
S000111 = 7,
S001000 = 8,
S001001 = 9,
S001010 = 10,
S001011 = 11,
S001100 = 12,
S001101 = 13,
S001110 = 14,
S001111 = 15,
S010000 = 16,
S010001 = 17,
S010010 = 18,
S010011 = 19,
S010100 = 20,
S010101 = 21,
S010110 = 22,
S010111 = 23,
S011000 = 24,
S011001 = 25,
S011010 = 26,
S011011 = 27,
S011100 = 28,
S011101 = 29,
S011110 = 30,
S011111 = 31,
S100000 = 32;

 reg [5:0] current_state = 0; // Current score count state declared as register
 reg [5:0] next_state = 0; // Next score count state declared as register

//Reset/Restart the game
 always @(posedge clk) begin
 if (reset) 
    current_state <= S000000;
else 
    current_state <= next_state;
 end
 
 
 always @(posedge clk) begin
 
 end

// Next state combinational logic

 always @(current_state, sw[15:0])
 begin
 case(current_state)
 
S000000: begin //initially score count is set to 1
next_state <= S000000;
led[15:0] <= 0;  //All leds initially zero
score_count <= 6'b000000; //score count is zero
led[1] <= 1; //led 1 is set on that reprsents a mole
    if (sw[1]) //if the user flips sw[1]
        next_state <= S000001; //then score count goes to 1, and next state is S0000001
    else
        next_state <= S000000;
end

S000001: begin //if the score count is 1
score_count <= 6'b000001;
    led[15:0] <= 0;
    led[11] <= 1; // and led 11 is on
    if (sw[11]) //and if sw11 is flipped, a mole is whacked
        next_state <= S000010; //then score count goes up by 1 i.e. in this case it oes to 2
    else
        next_state <= S000001;
end


S000010: begin
score_count <= 6'b000010;//2
    led[15:0] <= 0;
    led[2] <= 1;//led 2 in on
    if (sw[2])
        next_state <= S000011; //3 in dec
    else
        next_state <= S000010;
end
 
S000011: begin 
score_count <= 6'b000011;
    led[15:0] <= 0;
    led[12] <= 1;
    if (sw[12])
        next_state <= S000100; 
    else
        next_state <= S000011;
end

S000100: begin
score_count <= 6'b0000100;
    led[15:0] <= 0;
    led[7] <= 1;
    if (sw[7])
        next_state <= S000101; 
    else
        next_state <= S000100;
end

S000101: begin
score_count <= 6'b0000101;
    led[15:0] <= 0;
    led[6] <= 1;
    if (sw[6])
        next_state <= S000110; 
    else
        next_state <= S000101;
end

//ALL GOOD THROUGH HERE

S000110: begin
score_count <= 6;
    led[15:0] <= 0;
    led[9] <= 1;
    if (sw[9])
        next_state <= S000111; 
    else
        next_state <= S000110;
end

S000111: begin
score_count <= 7;
    led[15:0] <= 0;
    led[14] <= 1;
    if (sw[14])
        next_state <= S001000; 
    else
        next_state <= S000111;
end

S001000: begin
score_count <= 8;
    led[15:0] <= 0;
    led[15] <= 1;
    if (sw[15])
        next_state <= S001001; //go on to next state
    else
        next_state <= S001000;
end

S001001: begin
score_count <= 9;
    led[15:0] <= 0;
    led[8] <= 1;
    if (sw[8])
        next_state <= S001010; //go on to next state
    else
        next_state <= S001001;
end

S001010: begin
score_count <= 10;
    led[15:0] <= 0;
    led[5] <= 1;
    if (sw[5])
        next_state <= S001011; //go on to next state
    else
        next_state <= S001010;
end

S001011: begin
score_count <= 11;
    led[15:0] <= 0;
    led[13] <= 1;
    if (sw[13])
        next_state <= S001100; //go on to next state
    else
        next_state <= S001011;
end

S001100: begin
score_count <= 12;
    led[15:0] <= 0;
    led[4] <= 1;
    if (sw[4])
        next_state <= S001101; //go on to next state
    else
        next_state <= S001100;
end

S001101: begin
score_count <= 13;
    led[15:0] <= 0;
    led[10] <= 1;
    if (sw[10])
        next_state <= S001110; 
    else
        next_state <= S001101;
end

S001110: begin
score_count <= 14;
    led[15:0] <= 0;
    led[0] <= 1;
    if (sw[0])
        next_state <= S001111; 
    else
        next_state <= S001110;
end

S001111: begin
score_count <= 15;
    led[15:0] <= 0;
    led[3] <= 1;
    if (sw[3])
        next_state <= S010000; 
    else
        next_state <= S001111;
end

//Turnaround point

S010000: begin
score_count <= 16;
    led[15:0] <= 0;
    led[10] <= 1;
    if (sw[10] == 0)
        next_state <= S010001;
    else
        next_state <= S010000;
end


S010001: begin
score_count <= 17;
    led[15:0] <= 0;
    led[7] <= 1;
    if (sw[7] ==  0)
        next_state <= S010010; 
    else
        next_state <= S010001;
end

S010010: begin
score_count <= 18;
    led[15:0] <= 0;
    led[11] <= 1;
    if (sw[11] ==  0)
        next_state <= S010011; 
    else
        next_state <= S010010;
end

S010011: begin
score_count <= 19;
    led[15:0] <= 0;
    led[15] <= 1;
    if (sw[15] ==  0)
        next_state <= S010100; 
    else
        next_state <= S010011;
end

S010100: begin
score_count <= 20;
    led[15:0] <= 0;
    led[0] <= 1;
    if (sw[0] ==  0)
        next_state <= S010101; 
    else
        next_state <= S010100;
end

S010101: begin
score_count <= 21;
    led[15:0] <= 0;
    led[9] <= 1;
    if (sw[9] ==  0)
        next_state <= S010110; 
    else
        next_state <= S010101;
end

S010110: begin
score_count <= 22;
    led[15:0] <= 0;
    led[13] <= 1;
    if (sw[13] ==  0)
        next_state <= S010111; 
    else
        next_state <= S010110;
end

S010111: begin
score_count <= 23;
    led[15:0] <= 0;
    led[14] <= 1;
    if (sw[14] ==  0)
        next_state <= S011000; 
    else
        next_state <= S010111;
end

S011000: begin
score_count <= 24;
    led[15:0] <= 0;
    led[2] <= 1;
    if (sw[2] ==  0)
        next_state <= S011001; //go on to next state
    else
        next_state <= S011000;
end

S011001: begin
score_count <= 25;
    led[15:0] <= 0;
    led[4] <= 1;
    if (sw[4] ==  0)
        next_state <= S011010; 
    else
        next_state <= S011001;
end

S011010: begin
score_count <= 26;
    led[15:0] <= 0;
    led[8] <= 1;
    if (sw[8] ==  0)
        next_state <= S011011; 
    else
        next_state <= S011010;
end

S011011: begin
score_count <= 27;
    led[15:0] <= 0;
    led[1] <= 1;
    if (sw[1] ==  0)
        next_state <= S011100;
    else
        next_state <= S011011;
end

S011100: begin
score_count <= 28;
    led[15:0] <= 0;
    led[5] <= 1;
    if (sw[5] ==  0)
        next_state <= S011101; //go on to next state
    else
        next_state <= S011100;
end

S011101: begin
score_count <= 29;
    led[15:0] <= 0;
    led[6] <= 1;
    if (sw[6] ==  0)
        next_state <= S011110; 
    else
        next_state <= S011101;
end

S011110: begin
score_count <= 30;
    led[15:0] <= 0;
    led[12] <= 1;
    if (sw[12] ==  0)
        next_state <= S011111; //go on to next state
    else
        next_state <= S011110;
end

S011111: begin
score_count <= 31;
    led[15:0] <= 0;
    led[3] <= 1;
    if (sw[3])
        next_state <= S100000; 
    else
        next_state <= S011111;//score count should remain 31
end
S100000: begin
next_state <= S100000;
score_count <= 32;
led[15:0] <= 0;
end

default: begin 
    next_state = S000000;
end

endcase
end

 
endmodule

  module logic_gates(
   //port definitions 
    input sw0,
    input sw1,
    output out1, //AND Gates
    output out2 //OR Gate
    );
    
    //description of the logic gates 
    //data flow modeling 
    
    assign out1 =sw0 & sw1; //AND Gate 
    assign out2 =sw0 | sw1; //OR Gate
    
    endmodule




  
